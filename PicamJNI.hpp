
/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class org_photonvision_raspi_PicamJNI */

#ifndef _Included_org_photonvision_raspi_PicamJNI
#define _Included_org_photonvision_raspi_PicamJNI
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     org_photonvision_raspi_PicamJNI
 * Method:    getSensorModelRaw
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL
Java_org_photonvision_raspi_PicamJNI_getSensorModelRaw(JNIEnv *, jclass);

/*
 * Class:     org_photonvision_raspi_PicamJNI
 * Method:    isVCSMSupported
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL
Java_org_photonvision_raspi_PicamJNI_isVCSMSupported(JNIEnv *, jclass);

/*
 * Class:     org_photonvision_raspi_PicamJNI
 * Method:    createCamera
 * Signature: (III)Z
 */
JNIEXPORT jboolean JNICALL Java_org_photonvision_raspi_PicamJNI_createCamera(
    JNIEnv *, jclass, jint, jint, jint, jboolean);

/*
 * Class:     org_photonvision_raspi_PicamJNI
 * Method:    destroyCamera
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL
Java_org_photonvision_raspi_PicamJNI_destroyCamera(JNIEnv *, jclass);

/*
 * Class:     org_photonvision_raspi_PicamJNI
 * Method:    setThresholds
 * Signature: (DDDDDD)V
 */
JNIEXPORT void JNICALL Java_org_photonvision_raspi_PicamJNI_setThresholds(
    JNIEnv *, jclass, jdouble, jdouble, jdouble, jdouble, jdouble, jdouble);

/*
 * Class:     org_photonvision_raspi_PicamJNI
 * Method:    setExposure
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL
Java_org_photonvision_raspi_PicamJNI_setExposure(JNIEnv *, jclass, jint);

/*
 * Class:     org_photonvision_raspi_PicamJNI
 * Method:    setBrightness
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL
Java_org_photonvision_raspi_PicamJNI_setBrightness(JNIEnv *, jclass, jint);

/*
 * Class:     org_photonvision_raspi_PicamJNI
 * Method:    setGain
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL
Java_org_photonvision_raspi_PicamJNI_setGain(JNIEnv *, jclass, jint);

JNIEXPORT jboolean JNICALL
Java_org_photonvision_raspi_PicamJNI_setAwbGain(JNIEnv *, jclass, jint red, jint blue);

/*
 * Class:     org_photonvision_raspi_PicamJNI
 * Method:    setRotation
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL
Java_org_photonvision_raspi_PicamJNI_setRotation(JNIEnv *, jclass, jint);

/*
 * Class:     org_photonvision_raspi_PicamJNI
 * Method:    setShouldCopyColor
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_org_photonvision_raspi_PicamJNI_setShouldCopyColor(
    JNIEnv *, jclass, jboolean);

/*
 * Class:     org_photonvision_raspi_PicamJNI
 * Method:    getFrameLatency
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL
Java_org_photonvision_raspi_PicamJNI_getFrameLatency(JNIEnv *, jclass);

/*
 * Class:     org_photonvision_raspi_PicamJNI
 * Method:    grabFrame
 * Signature: (Z)J
 */
JNIEXPORT jlong JNICALL
Java_org_photonvision_raspi_PicamJNI_grabFrame(JNIEnv *, jclass, jboolean);

#ifdef __cplusplus
}
#endif
#endif
